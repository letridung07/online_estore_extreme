from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Order, OrderItem
from cart.models import Cart, CartItem
from cart.views import get_cart

@login_required
def checkout(request):
    cart = get_cart(request)
    if not cart.items.exists():
        messages.error(request, "Your cart is empty. Add items to your cart before checking out.")
        return redirect('cart_detail')
    
    discount_code = request.session.get('discount_code')
    discount_amount = 0
    discounted_total = cart.total_price
    
    if discount_code:
        try:
            from promotions.models import DiscountCode
            discount = DiscountCode.objects.get(code=discount_code, is_active=True)
            from django.utils import timezone
            now = timezone.now()
            if discount.start_date <= now <= discount.end_date and discount.times_used < discount.usage_limit:
                if cart.total_price >= discount.minimum_purchase:
                    if discount.discount_type == 'percentage':
                        discount_amount = cart.total_price * (discount.discount_value / 100)
                    else:  # fixed_amount
                        discount_amount = min(discount.discount_value, cart.total_price)
                    discounted_total = cart.total_price - discount_amount
                else:
                    messages.error(request, f"Minimum purchase of ${discount.minimum_purchase} required for discount code {discount_code}.")
                    del request.session['discount_code']
                    request.session.modified = True
            else:
                messages.error(request, f"Discount code {discount_code} is no longer valid.")
                del request.session['discount_code']
                request.session.modified = True
        except DiscountCode.DoesNotExist:
            messages.error(request, f"Discount code {discount_code} is invalid.")
            del request.session['discount_code']
            request.session.modified = True
    
    if request.method == 'POST':
        full_name = request.POST.get('full_name')
        address = request.POST.get('address')
        city = request.POST.get('city')
        postal_code = request.POST.get('postal_code')
        country = request.POST.get('country')
        
        # Concatenate shipment information into a single string for shipping_address
        shipping_address = f"Full Name: {full_name}, Address: {address}, City: {city}, Postal Code: {postal_code}, Country: {country}"
        
        order = Order.objects.create(
            user=request.user,
            total_price=discounted_total,
            shipping_address=shipping_address,
            status='pending'
        )
        
        for item in cart.items.all():
            OrderItem.objects.create(
                order=order,
                product=item.product,
                quantity=item.quantity,
                price=item.product.price
            )
        
        # Clear the cart and discount code after successful order creation
        cart.items.all().delete()
        if discount_code:
            try:
                discount = DiscountCode.objects.get(code=discount_code, is_active=True)
                discount.times_used += 1
                discount.save()
                del request.session['discount_code']
                request.session.modified = True
            except DiscountCode.DoesNotExist:
                pass
                
        # Handle saving card information if requested
        save_card = request.POST.get('save_card')
        if save_card:
            from payments.models import SavedPaymentMethod
            card_number = request.POST.get('card_number', '')
            last_four_digits = card_number[-4:] if card_number else 'XXXX'
            # In a real implementation, a token would be generated by a payment gateway
            token = f"token_{request.user.id}_{order.id}"
            SavedPaymentMethod.objects.create(
                user=request.user,
                payment_method_type='credit_card',
                last_four_digits=last_four_digits,
                token=token,
                is_default=False
            )
            messages.success(request, "Your card has been saved for future purchases.")
                
        messages.success(request, f"Your order #{order.id} has been placed successfully!")
        return redirect('order_confirmation', order_id=order.id)
    
    # Check for saved payment methods
    saved_payment_methods = []
    if request.user.is_authenticated:
        from payments.models import SavedPaymentMethod
        saved_payment_methods = SavedPaymentMethod.objects.filter(user=request.user)
    
    return render(request, 'orders/checkout.html', {
        'cart': cart,
        'discount_amount': discount_amount,
        'discounted_total': discounted_total,
        'saved_payment_methods': saved_payment_methods
    })

@login_required
def order_confirmation(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'orders/order_confirmation.html', {'order': order})
